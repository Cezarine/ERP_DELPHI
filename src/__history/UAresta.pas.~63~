unit UAresta;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, RzCmboBx, RzButton,
  Vcl.Mask, RzEdit, RzLabel, Vcl.ExtCtrls, RzPanel, UDMConexao, UDMEntidades,
  FireDAC.Comp.Client;

type
  TfrmAresta = class(TForm)
    panelPrincipal: TRzPanel;
    lblTitulo: TRzLabel;
    lblDirecao: TLabel;
    lblChegada: TLabel;
    lbSaida: TLabel;
    lblLinhaTitulo: TLabel;
    lblDistancia: TRzLabel;
    btnSalvar: TRzButton;
    cbxDirecao: TRzComboBox;
    cbxSaida: TRzComboBox;
    cbxChegada: TRzComboBox;
    edtDistancia: TRzNumericEdit;
  private
    { Private declarations }
    procedure OpenQuerys;
    procedure CloseQuerys;
    procedure CarregaCombos(AComboBox: TRzComboBox; AQuery: TFDQuery; ANameIDTable, ANameDescricaoTable: String);
    function GravaCaminho: Boolean;
  public
    { Public declarations }
  end;

var
  frmAresta: TfrmAresta;

implementation

{$R *.dfm}

{ TfrmAresta }

procedure TfrmAresta.CarregaCombos(AComboBox: TRzComboBox; AQuery: TFDQuery;
  ANameIDTable, ANameDescricaoTable: String);
begin
   {$Region 'CarregaCombos'}
   try
      (* Adiciono as empresas no combobox *)
      if not AQuery.IsEmpty then
      begin
         AComboBox.Items.Clear;
         AComboBox.Values.Clear;

         AQuery.First;
         while not AQuery.Eof do
         begin
            AComboBox.AddItemValue(AQuery.FieldByName(ANameIDTable).AsString + ' - ' +
                     AQuery.FieldByName(ANameDescricaoTable).AsString,
                     AQuery.FieldByName(ANameIDTable).AsString);

            AQuery.Next;
         end;
         AComboBox.ItemIndex := 0;
      end;
   except on Exc: Exception do
      raise Exception.Create('Ocorreu um erro ao tentar carregar os combos: ' + Exc.Message);
   end;
   {$EndRegion 'CarregaCombos'}
end;

procedure TfrmAresta.CloseQuerys;
begin
   {$Region 'CloseQuerys'}
   dmEntidades.QCampus.Close;
   dmEntidades.QStatus.Close;
   dmEntidades.QAndares.Close;
   dmEntidades.QBlocos.Close;
   {$EndRegion 'CloseQuerys'}
end;

function TfrmAresta.GravaCaminho: Boolean;
var
   LQueryAresta: TFDQuery;
begin
   {$Region 'GravaCaminho'}
   Result := False;
   LQueryAresta   := TFDQuery.Create(nil);
   try
      LQueryAresta.Connection    := dmConexao.Conexao;
      try
         LQueryAresta.Close;
         LQueryAresta.SQL.Clear;
         LQueryAresta.SQL.Add('SELECT * FROM arestas WHERE id_vertice_origem = :id_vertice_origem AND id_vertice_destino = :id_vertice_destino');
         LQueryAresta.ParamByName('id_vertice_origem').AsInteger  := StrToInt(cbxSaida.Value);
         LQueryAresta.ParamByName('id_vertice_destino').AsInteger := StrToInt(cbxChegada.Value);
         LQueryAresta.Open();

         if not LQueryAresta.IsEmpty then
         begin
            ShowMessage('Caminho já cadastrado');
            Exit;
         end;

         LQueryAresta.Append;
         LQueryAresta.FieldByName('id_vertice_origem').AsInteger  := StrToInt(cbxSaida.Value);
         LQueryAresta.FieldByName('id_vertice_destino').AsInteger := StrToInt(cbxChegada.Value);
         LQueryAresta.FieldByName('distancia').AsFloat            := edtDistancia.Value;
         LQueryAresta.FieldByName('direcao').AsInteger            := StrToInt(cbxDirecao.Value);
         LQueryAresta.Post;

         Result := True;
      except on Exc:Exception do
         raise Exception.Create('Erro Inserir Caminhos: ' + Exc.Message);
      end;
   finally
      FreeAndNil(LQueryAresta);
   end;
   {$EndRegion 'GravaCaminho'}
end;

procedure TfrmAresta.OpenQuerys;
begin
   {$Region 'OpenQuerys'}
   dmEntidades.QAndares.Open;
   CarregaCombos(cbxAndares, dmEntidades.QAndares, 'id_andar', 'nome');

   dmEntidades.QVertice.Open;
   CarregaCombos(cbxSaida, dmEntidades.QVertice, 'id_vertice', 'nome');

   dmEntidades.QVertice.Open;
   CarregaCombos(cbxChegada, dmEntidades.QVertice, 'id_vertice', 'nome');
   {$EndRegion 'OpenQuerys'}
end;

end.
